{"./":{"url":"./","title":"Introduction","keywords":"","body":"单词表 第一天单词表 client /'klaɪənt/ n. 客户端程序 server /'sɜːvə/ n. 服务器 browser /'brauzə/ n. [电脑]浏览器 internet /'ɪntɚnɛt/ n. 因特网 explorer /ek'splɔːrə(r)/ n. 探测者，探测器；浏览 apache /ə'pæʃ/ n. 阿帕切族（美洲印第安部族）阿帕奇直升机.阿帕奇服务器 echo /ˈekəu/ vt. 重复；反射 注意 php中 这个单词的作用是 用来输出内容 response /rɪ'spɒns/ n. 响应；反应；回答 request /rɪ'kwest/ n. 请求；需要 content /kən'tent/ n. 内容，目录；容量；满足 type /taɪp/ n. 类型; 种类 charset 字符集 base /beɪs/ n. 基础 grammer /'græmə/ n. 语法 第二天单词表 file /faɪl/ n. 文件; 计算机文件 content /kən'tent/ n. 内容，目录；容量；满足 xml /ˌeksemˈel/ abbr. Extensible Markup Language 可扩展标记语言 json abbr. 基于JavaScript语言的轻量级的数据交换格式(JavaScript Object Notation) ajax /ˈeɪˌdʒæks/ 创建交互式 Web 应用程序而无需牺牲浏览器兼容性的流行方法（Asynchronous JavaScript and XML）； ready /'redɪ/ adj. 准备好；情愿的；现成的；迅速的；快要…的 state /steɪt/ n. 情形；国家；州 change /tʃeɪn(d)ʒ/ vt. & vi. 改变, 改换; 变化 status /'steɪtəs/ n. 身份, 地位 open /'əʊp(ə)n/ vt. 打开；公开 send /send/ vt. 发送，寄；派遣；发射；使进入 chat /tʃæt/ vi. 聊天；闲谈 serialize /ˈsɪəri:əˌlaɪz/ vt. 序列化 第四天单词表 beat /biːt/ vi. (心脏等)跳动 软件行业中会用作测试的版本号 pro /prəʊ/ adv. 专业的 callback /'kɔːlbæk/ n. 回叫信号；回收; 软件行业 一般用作回调函数的称呼 namespace /'neimspeis/ n. 命名空间 success /sək'ses/ n. 成功; 成就 fail /feɪl/ vt. & vi. 在…中失败 error /'erə/ n. 错误 send /send/ vt. 发送，寄；派遣；发射；使进入 register /'redʒɪstə/ vt. 记录；注册；登记；把…挂号；挂号邮寄；正式提出 collapse /kə'læps/ vi. 倒塌；瓦解；暴跌 table 设置td线段合并 code /kəʊd/ n.代号, 编码 template /'templeɪt/ n. 模板 exec /ɪg'zek/ n. [计]执行，执行程序 match /mætʃ/ vi. 相配，相称；比赛；匹配；相比 第五天单词表 frame /freɪm/ n. 框架；结构；画面 cross /krɒs/ vi. 交叉；横过；杂交 vt. 使相交；渡过 weather /'weðə/ n. 天气；气象；处境；气候 film /fɪlm/ n. 影片, 电影 move /muːv/ vt. & vi. 移动; 搬动 vi. 搬家, 迁移 update /ʌp'deɪt/ vt. 更新；校正，修正；使现代化 temperature /'temp(ə)rətʃə/ n. 温度, 气温 nation /'neɪʃ(ə)n/ n. 国家；民族；国民 extend /ɪk'stend/ vt. & vi. (空间、时间等)延伸; 延续 fall /fɔːl/ vi. 降落, 落下 floor /flɔː/ n. 地面, 地板 "},"Sources/1.1_Web开发概述.html":{"url":"Sources/1.1_Web开发概述.html","title":"1.1 Web开发概述","keywords":"","body":"Web开发概述 web开发涵盖了很多方面的技术,为了弄明白这些技术之间的关系,我们通过一幅图来进行讲解 当我们使用浏览器访问网页时.无论是访问本地或网络上的网页,最终浏览器接收到的都是HTML,CSS,JavaScript,紧接着浏览器将这些内容渲染(显示)成图形界面给用户.这些界面的设计者,就是我们的前端工程师 常见的浏览器 ie: chrome: firefox: opera: 国内的浏览器用的就是这些厂商的内核，所以并不能称之为全新的浏览器,故这里不一一列出 HTML 百度百科:超文本标记语言，标准通用标记语言下的一个应用。“超文本”就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。 超文本标记语言? 有了网络以后我们想传播的不仅仅只有文字,可能还有图片,音频,视频或者更多好玩的东西,那么如何来表达这些内容呢? 1 中文:这是一张图片 2 英文:this is a picture 3 阿拉伯语:هذه هي الصورة ....等等 很明显,这对于母语中文,略懂英文的我们而言,这不是一个很好的示例,别忘了世界上有很多不同的语言,如果不同国家都用本国的语言来交流很明显不是一个好的方法 HTML(超文本标记语言) 超文本标记语言的作用就是提供了一种标准格式,当大家都遵守这种格式时,彼此之间就能够进行交流,下图就是一些简单的HTML代码,使用标签的方式将需要表述的内容包裹起来,经由浏览器解析展现给用户. 更为详细的教程可以查阅 w3cSchool_HTML教程 HTML5 HTML的出现就是让广大开发者,对于网页代码中标签名,标签属性等等内容的一个通用标准,而HTML5就是其中比较新的一个标准而已,所以从狭义来说:HTML5就是多了几个新的标签而已,这些标签的强大之处在于:让原本需要开发人员写一堆代码才能实现的功能,现在直接就可以使用(注:移动设备对于HTML5的支持更为友善) CSS 如果说HTML是网页的骨架,那么CSS的出现就是让这身骨架拥有了衣服,变得更为精美.更为详细的写法教程可以查阅w3cSchool_CSS教程 纯HTML 在没有CSS的时代,单纯的时候标签进行数据的传递,这个时候的页面非常适合搞学术的人群因为他真的很难看: CSS 当我们为其添加了CSS效果以后,就会出现惊人的变化(页面不好看轻拍 o(╯□╰)o) CSS3 如果说CSS是普通的衣服,那么CSS3就是充值了VIP以后可以穿的衣服,更为酷炫,可以让页面中的元素拥有更多的变化 JavaScript 当页面拥有了骨骼HTML,衣服CSS之后,能够动起来,我们又有了JavaScript. 更为详细的写法教程可以查阅w3cSchool_JavaScript教程 JavaScript 通过使用JavaScript让我们的页面能够真正的跟用户交互起来,比如:用户鼠标移动时出现花朵,用户注册时输入用户名检查是否重名并且给予相应的提醒等等.通过这些方式让我们的页面更为人性化.不过JavaScript的作用不仅于此,也能够用来开发服务端,比如node.js这里先不做拓展. "},"Sources/1.2_HTTP服务搭建.html":{"url":"Sources/1.2_HTTP服务搭建.html","title":"1.2 HTTP服务搭建","keywords":"","body":"HTTP服务搭建 AMP AMP:A:Apache,M:MySQL,P:PHP Apache 世界排名第一的服务器软件,特点是简单,速度快,性能稳定 MySQL 得益于他体积小、速度快、使用成本低，而且是开源哦，所以很多网站都选用MySql作为他们的数据库. PHP 展开后PHP: Hypertext Preprocessor，中文名：超文本预处理器,直接将代码嵌入HTML 文档中执行,简单易学,容易上手. AMP集成环境 刚刚已经解释了这几个单词的意思,其中AMP是三个独立的软件,但是对于初学者而言分别安装以及配置需要掌握一定的软件知识,所以就有了很多AMP集成环境帮助我们简化安装 WAMP: 在windows平台下如果想要一步到位安装好这些软件,可以使用wamp,其中w的意思为windows指的是windows操作系统 软件的官网为:wamp官方网站 XAMPP: 不同于wamp针对于windows,XAMPP可以安装在Linux,Windows,MAC OS X,Solaris这些操作系统上面 WAMP安装,配置,注意点 这里选用wamp作为学习环境,接下来演示如何安装并设置wamp WAMP安装 双击提供的安装包 点击Next 选择安装路径,注意:不要使用中文路径.建议使用跟图片一致的路径 如果担心安装完成后找不到wamp可以将两个方框全部勾选,点击next继续安装 点击install开始安装 安装完毕以后点击finish即可启动wamp 启动完成能够在任务栏的右下角看到这个图标即表示安装成功 测试访问 打开浏览器输入127.0.0.1查看显示的内容,如果是第一次安装,默认显示的应该是如下图片 127.0.0.1含义: 127.0.0.1是回送地址，指本地机，一般用来测试使用,如果想要让其他电脑也能够访问,需要进行一些配置,详见下文. WAMP图标橙色解决方案 如果没有使用过自己的电脑配置服务器那么WAMP默认应该为绿色的图标,那么如果WAMP启动,显示的是橙色图标怎么办呢? 1.检查是否开启了服务:保证Apache,MySQL的服务都是启动状态即可 2.检查是否开启了微软自带的IIS服务:首先打开控制面板,保证动态图最后选中的Internet Information Services没有被勾选即可 3.修改端口号:在httpd.conf中搜索 listen,大概在46行的位置 Listen 80 改为 listen 8080 注这里可以改为任意的端口,修改完毕之后, 保存并重启wamp 访问时在ip地址之后添加:8080 端口号即可 如 192.168.18.125:8080 4.终极解决: 卸载-删除文件夹(wamp安装的文件夹)-重装 配置局域网访问 安装好了WAMP之后就能够通过自己的浏览器输入127.0.0.1,如果想要让同一局域网中的其他电脑也能够访问,需要进行如下配置 关闭防火墙:首先打开控制面板 修改httpd.conf文件 因为Apache的配置默认不允许外部访问,我们需要修改配置 找到D:\\wamp\\bin\\apache\\Apache2.2.21\\conf文件 使用文本编辑工具打开,通过搜索功能找到onlineoffline tag - don't remove这句话，将在234行附近的 Allow from 127.0.0.1 替换为 Allow from all 保存,然后重启wamp的所有服务即可 获取本机IP地址: 方法1: 打开控制面板->网络和Internet->网络和共享中心->更改适配器设置 找到正在连接的网络,双击 方法2: 打开命令行工具 输入ipconfig 局域网内访问: 使用一台相同局域网内的拥有浏览器的设备即可通过刚刚获取的IP地址进行访问 常见的通局域网计算机: 局域网的概念这里不做拓展,为了方便测试当满足下列情况可以尝试访问 连接同一个wifi的计算机(手机也可以测试) 连接同一个交换机的计算机 同教室的电脑 同公司的电脑 配置网站根目录 (注: 这里使用的路径为上述安装时的路径,如果没有安装在D盘,那么需要找到对应的路径) 找到WAMP的安装目录:D:\\wamp 找到Apache的配置文件 D:\\wamp\\bin\\apache\\Apache2.2.21\\conf 修改http.conf文件 使用文本编辑工具打开httpd.conf文件,搜索documentRoot 如果是初次安装,应该分别在178行,205行 修改完毕以后记得保存ctrl+s 重启WAMP服务 左键点击wamp图标,选择重新启动所有服务 建立文件夹,尝试访问 为了保证访问时确实有内容,在E:盘下建立www文件夹,并且在改文件夹下放入文件,再次尝试通过127.0.0.1进行访问 "},"Sources/2.1_PHP概述及常见语法.html":{"url":"Sources/2.1_PHP概述及常见语法.html","title":"2.1 PHP概述及常见语法","keywords":"","body":"PHP概述及常见语法 web服务端开发 在讲解什么是服务端开发之前,让我们先思考几个问题 网站访问: 当我们做好了.html的网站,如何让别人(朋友,用户)可以访问到呢? 使用U盘拷贝,QQ发送文件等直接将文件共享的方式?---不灵活 将网站放在服务器上,让用户通过网址访问?---绝大多数网站的做法 网站内容更新: 如果用户每次访问我们的网站看到的内容都是一样的,在最初的新鲜劲过去以后估计就再也不想访问我们的网站了o(╯□╰)o,那么如何去更新网站的内容呢? 当有内容,图片,或者界面需要更新是,直接修改.html文件?---费时费力 通过某种手段,当有新的消息,自动的完成网站的更新?---动态网站 如何实现网站动态化 网站的本质,其实就是一堆按照某种规则排列的字符串而已,如果我们可以通过某种方式,让电脑动态生成这些字符串,是不是就实现了网站的动态化? 想要让电脑干事情,可以通过编程语言来实现. 编程语言的编写位置为服务器,因为用户是问服务器要网站的 在服务器,通过编程语言让用户访问的网站动态化叫做:服务端web开发 可选开发方式: 虽然基本上所有可以返回字符串的编程语言都能够实现这个功能,目前市场主流开发语言有:Java,PHP,ASP.Net,Ruby,Python,Erlang等.虽然可以选择的开发语言有很多种,但是本质都是一样的: 当用户访问网站了,根据`某些逻辑`,生成对应的`HTML,CSS,JS`代码给用户 PHP简介 PHP在众多的编程语言中,是比较容易上手,结合我们搭建的WAMP环境就能够开始学习了 PHP代码执行方式: 服务端web编程写好的代码,需要通过浏览器访问服务器,在服务器端执行,然后返回给用户结果,如果直接使用浏览器打开,就会解析为文本 PHP常见语法 注,这里只列举常用的PHP语法,更为详细的语法教程可以查阅w3cschool_PHP教程 文件定义,注释: PHP文件以.php结尾,代码的编写位置在.注释的写法跟js一致 PHP变量规则: 变量以$符号开头，其后是变量的名称 变量名称必须以字母或下划线开头 变量名称不能以数字开头 变量名称只能包含字母数字字符和下划线（A-z、0-9 以及_） 变量名称对大小写敏感 // 变量以`$`符号开头，其后是变量的名称 // 变量名称必须以字母或下划线开头 $a; $b; $a1; $_abc; // 变量名称不能以数字开头 // 变量名称只能包含字母数字字符和下划线（`A-z`、`0-9` 以及` _`） // 下面这些是错误的变量定义 $1; $哈哈; $^&*; //变量名称对大小写敏感（`$y` 与`$Y` 是两个不同的变量） // 下面定义的两个变量是不同的,大写,小写x $x; $X; 数据类型 PHP支持的数据类型包括:字符串,整数,浮点数,布尔,数组,对象,NULLL(注:由于对象中可以使用函数,故对象的语法在下文中会提及) 定义字符串时需要注意: 单引号:`` 内部的内容只是作为字符串 双引号:\"\" 如果内部是PHP的变量,那么会将该变量的值解析 字符串连接:不同于JavaScript,PHP中使用.进行连接 // 字符串 $str = '123'; // 字符串连接 $str2 = '123'.'哈哈哈'; // 字符串 // 整数 $numA = 1; //正数 $numB = -2;//负数 // 浮点数 $x = 1.1; // 布尔 $a = true; $b = false; // 数组 $arr = array('123',123) 运算符 PHP中的运算符跟JavaScript中的基本一致,用法也基本一致 算数运算符: +,-,/,*,% 赋值运算符: x = y,x += y,x -= y 注:这里列举的并不完全,更为详细的PHP运算符教程请查阅w3cschool_PHP运算符 函数: PHP虽然系统内建了一些函数,但是这不影响我们定义自己的. 函数的作用就是在代码中可以重复使用的语法块,页面加载的时候不会执行,只有在被调用的时候才会执行 // 基础语法 function functionName() { // 这里写代码 } // 无参数 无返回值的函数 function sayhi(){ echo \"Hello World\"; } // 有参数 无返回值的函数 function sayName($name){ echo $name.'你好哦'; } // 调用 sayName('小狐狸'); // 有参数,参数有默认值的函数 function sayFood($food='西兰花'){ echo $food.'好好吃'; } // 调用 sayFood('西葫芦');// 如果传入参数,就使用传入的参数 sayFood();// 如果不传入参数,直接使用默认值 // 有参数,有返回值的函数 function sum($a,$b){ return $a+$b } sum(1,2);// 返回值为1+2 = 3 对象 PHP中允许使用对象这种,自定义数据类型. 使用时必须先声明,实例化之后才能够使用 // 定义最基础的类 class Fox{ public $name = 'itcast'; public $age = 10; } $fox = new $fox; // 对象属性取值 $name = $fox->name; // 对象属性赋值 $fox->name = '小狐狸'; // 带构造函数的对象 class fox{ // 私有属性,外部无法访问 var $name = '小狐狸'; // 定义方法 用来获取属性 function Name(){ return $this->name; } // 构造函数,可以传入参数 function fox($name){ $this->name = $name } } // 定义了构造函数 需要使用构造函数初始化对象 $fox = new fox('小狐狸'); // 调用对象方法,获取对象名 $foxName = $fox->Name(); 内容输出: echo:PHP语句直接使用即可,输出字符串 print_r():函数输出复杂数据类型,比如数组,对象 var_dump():函数输出详细信息，如对象、数组 $arr =array(1,2,'123'); echo'123'; // 结果为 123 print_r($arr); // 结果为 Array ( [0] => 1 [1] => 2 [2] => 123 ) var_dump($arr); /* 结果为 array 0 => int 1 1 => int 2 2 => string '123' (length=3) */ 循环语句: 这里只列举了foreach,for循环 // for 循环 for ($x=0; $x\"; } // foreach 循环 $colors = array(\"red\",\"green\",\"blue\",\"yellow\"); // 参数1为循环的对象,参数2会将对象的值挨个取出,直到最后 // 如果循环的是对象的话,输出的是对象属性的值 foreach ($colors as $value) { echo \"$value \"; } 输出结果为 /* red green blue yellow */ header()函数 用来向客户端(浏览器)发送报头,如果出现中文无法显示,可以尝试在PHP代码顶部添加 如下代码 header(\"content-type:text/html; charset=utf-8\"); "},"Sources/2.2_PHP中的header.html":{"url":"Sources/2.2_PHP中的header.html","title":"2.2 PHP中的header","keywords":"","body":"php中header() 浏览器访问http服务器,接收到响应时,会根据响应报文头的内容进行一些具体的操作,在php中,我们能够使用 header来设置这些内容 设置文本编码 设置编码格式为:utf-8 header('content-type:text/html; charset= utf-8'); 设置页面跳转 设置跳转到百度首页 header('location:http://www.baidu.com'); 设置页面间隔刷新 header('refresh:3; url=http://www.xiaomi.com'); "},"Sources/2.3_PHP超全局变量.html":{"url":"Sources/2.3_PHP超全局变量.html","title":"2.3 PHP超全局变量","keywords":"","body":"PHP超全局变量 在PHP中，获取GET请求、POST请求、POST上传文件请求，提交的数据，需要用到三个超全局变量：$_GET、$_POST、$_FILES PHP_GET数据获取 在PHP中,如果想要获取通过get方法提交的数据,可以通过$_GET对象来获取(虽然参数在地址栏中可以查看) HTML代码: 下面就是一个简单的表单代码,将数据提交到01.php,使用get的方式 姓名: 邮箱: PHP代码: GET_PAGE\"; echo 'userName:'.$_GET['userName']; echo ''; echo 'userEmail:'.$_GET['userEmail']; ?> PHP_POST数据获取 在PHP中,如果想要获取通过post方法提交的数据,可以通过$_POST对象来获取 HTML代码: 下面就是一个简单的表单代码,将数据提交到02.php,使用post的方式(注意:代码中的method改为post) 姓名: 邮箱: PHP代码: POST_PAGE\"; echo 'userName:'.$_POST['userName']; echo ''; echo 'userEmail:'.$_POST['userEmail']; ?> POST&GET错误处理 当我们直接访问POST&GET页面时由于并没有传递任何数据,会因为$_GET或$_POST不存在对应的key而报错. 处理方式1: 使用array_key_exists(key, 数组)函数来进行判断 参数1: 要检测的key字符串 参数2: 检验的数组 if(array_key_exists('name', $_GET)){ //如果有数据 再去读取 }else{ // 反之 可以执行一些 其他的逻辑 } PHP文件上传处理01_$_FILES对象 上传文件时html代码中需要进行如下设置: 在html表单中需要设置enctype=\"multipart/form-data\" 只能post方式 PHP接收文件可以通过$_FILES来获取 HTML代码: 照片: PHP代码01 这部分代码测试$_FILES文件的具体内容 现象: 点击提交后,服务器没有立即出现反应,而是休息了一会sleep(5) 在wamp/tmp目录下面出现了一个.tmp文件 .tmp文件一会就被自动删除了 服务器返回的内容中,有文件的名字[name] => computer.png,以及上传文件保存的位置D:\\wamp\\tmp\\php3D70.tmp PHP文件上传处理02_文件保存 刚刚演示了$_FILES对象的作用,以及PHP接受上传文件时,会先保存在一个临时目录下,那么接下来我们就演示如何将临时目录下面的文件保存起来 HTML代码: 这部分的代码不需要改变 照片: PHP代码 move_uploaded_file()这个函数可以处理文件 w3cSchool_move_uploaded_file函数解释 Array ( [picture] => Array ( [name] => computer.png [type] => image/png [tmp_name] => D:\\wamp\\tmp\\php8913.tmp [error] => 0 [size] => 5212 ) ) 其中我们需要通过picture(根据表单标签的name属性决定)获取临时文件名以及上传文件名 "},"Sources/2.4_PHP保存上传文件.html":{"url":"Sources/2.4_PHP保存上传文件.html","title":"2.4 PHP保存上传文件","keywords":"","body":"php保存上传文件 php中上传的文件,会先以临时文件的方式保存起来,我们将其移动到其他的位置即可 $_FILE 在php中 能够通过$_FILE 获取上传的文件 浏览器端部分代码() 假定浏览器在form表单中如下标签 注1form提交数据需使用post提交 注2form提交数据时,需在form表单中添加enctype=multipart/form-data属性 服务端代码 $_FILES用法跟$_GET,$_POST类似,都是关系型数组 #_FILE['key']:可以获取对应上传的文件,这里的key跟提交时的name相对应 #_FILE['key']['name'] 可以获取上传的文件名 #_FILE['key']['tmp_name'] 可以获取上传的文件保存的临时目录 move_uploaded_file(移动文件) 上传的临时文件,一会就会被自动删除,我们需要将其移动到保存的位置 move_uploaded_file参数: 参数1:移动的文件 参数2:目标路径 move_uploaded_file($_FILES['photo']['tmp_name'], './images/test.jpg'); "},"Sources/2.5_PHP设置上传文件大小限制.html":{"url":"Sources/2.5_PHP设置上传文件大小限制.html","title":"2.5 PHP设置上传文件大小限制","keywords":"","body":"php设置上传文件大小限制 在使用wamp过程中,如果想要修改上传的文件显示,需要如何设置呢? 修改php.ini 步骤 左键点击wamp 选择php 在弹出的窗口中选择php.ini 在打开的文件中进行修改(修改步骤如下) 修改完毕,保存并重启wamp 示意图 修改内容 使用文本编辑工具的搜索功能找到下列选项 进行修改 设置文件最大上传限制(值的大小可以根据需求修改) file_uploads = On ; 是否允许上传文件 On/Off 默认是On upload_max_filesize = 32M ; 上传文件的最大限制 post_max_size = 32M ; 通过Post提交的最多数据 考虑网络传输快慢,这里修改一些参数 max_execution_time = 30000 ; 脚本最长的执行时间 单位为秒 max_input_time = 600 ; 接收提交的数据的时间限制 单位为秒 memory_limit = 1024M ; 最大的内存消耗 "},"Sources/3.1_前端通讯两大技术.html":{"url":"Sources/3.1_前端通讯两大技术.html","title":"3.1 前端通讯两大技术(form|ajax)","keywords":"","body":"前端网络交互的两种技术方案 form表单提交、以及后来的ajax异步交互 form与ajax的对比 ‌form必须有提交按钮，ajax只要在javascript中可以随意发起 ‌form只能提交数据，不能接收数据，ajax都可以 ‌form会跳转到url界面，ajax不会(也可以利用BOM api跳转) form/ajax的应用： 可以用在前端与后台服务器交互中，常用来给服务器发送、请求数据 也可以在前端的html之间，用来跨文件传值(需要将被传值文件改为.php，使用的时候也是用PHP代码来取用) 前端中发送请求的三种形式 地址栏输入URL，访问 form表单，发送请求(上面两种方式，都会刷新界面) form表单，是用来搜集用户数据的，所以不做接受数据：刷新界面、同步、发送数据(得有提交按钮) 设置action = URL、method = GET/POST(默认是GET)，有三种形式： method = GET method = POST POST上传文件：(在当前界面上传完成之后，才跳转) ajax发送请求 同iOS里的网络数据请求：不刷新界面、异步、发送、接受数据 写法,是通过浏览器端的js,帮我们预定义的一个 异步对象 — XMLHttpRequest 来完成的 请求数据结果： 如果请求的是HTML文件：原封不动返回，服务器不会动这个HTML文件 如果请求的是PHP文件： HTML部分的代码，原封不动的返回 里的PHP代码，在服务器端执行，只返回输出函数：echo、print_f 打印的结果 "},"Sources/3.2_ajax概念及基本使用.html":{"url":"Sources/3.2_ajax概念及基本使用.html","title":"3.2 ajax概念及基本使用","keywords":"","body":"Ajax概念及基本使用 同步&异步 先上概念 同步: 必须等待前面的任务完成,才能继续后面的任务 异步: 不受当前任务的影响 举个例子: 同步: 我们在银行排队时,只有等到你了,才能够去处理业务. 异步: 我们在排队的时候,玩手机是没有任何影响的(不建议做低头族哦) 异步更新网站 当我们访问一个普通的网站时,当浏览器加载完:HTML,CSS,JS以后网站的内容就固定了.如果网站内容发生更改必须刷新页面才能够看到更新的内容 异步更新 实际情况是:我们在访问新浪微博时,当你看到一大半了,会自动帮我们加载更多的微博,同时页面并没有刷新 Ajax概念 当我们正在排队的时候,可以通过手机去干一些其他的事情. 在浏览器中,我们也能够不刷新页面,通过ajax的方式去获取一些新的内容,类似网页有微博,朋友圈,邮箱等 单词解释: Asynchronous Javascript And XML（异步JavaScript和XML），并不是凭空出现的新技术，而是对于现有技术的结合：核心是js对象XMLHttpRequest XMLHttpRequest ajax使用的依旧是HTTP请求,那么让我们来回忆一下一个完整的HTTP请求需要什么 请求的网址,方法get/post 提交请求内容数据,请求主体等 接收响应回来的内容 五步使用法: 建立XMLHTTPRequest对象 注册回调函数 当服务器回应我们了,我们想要执行什么逻辑 使用open方法设置和服务器端交互的基本信息 设置提交的网址,数据,post提交的一些额外内容 设置发送的数据，开始和服务器端交互 发送数据 更新界面 在注册的回调函数中,获取返回的数据,更新界面 示例代码:GET get的数据,直接在请求的url中添加即可 // 创建XMLHttpRequest 对象 var xml = new XMLHttpRequest(); // 设置跟服务端交互的信息 xml.open('get','01.ajax.php?name=fox'); xml.send(null); // get请求这里写null即可 // 接收服务器反馈 xhr.onreadystatechange = function () { // 这步为判断服务器是否正确响应 if (xhr.readyState == 4 && xhr.status == 200) { // 打印响应内容 alert(xml.responseText); } }; 示例代码:POST // 异步对象 var xhr = new XMLHttpRequest(); // 设置属性 xhr.open('post', '02.post.php' ); // 如果想要使用post提交数据,必须添加 xhr.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\"); // 将数据通过send方法传递 xhr.send('name=fox&age=18'); // 发送并接受返回值 xhr.onreadystatechange = function () { // 这步为判断服务器是否正确响应 if (xhr.readyState == 4 && xhr.status == 200) { alert(xhr.responseText); } }; XMLHttpRequest_API讲解 1.创建XMLHttpRequest对象(兼容性写法) 新版本浏览器: var xml=new XMLHttpRequest(); （IE5 和 IE6） var xml=new ActiveXObject(\"Microsoft.XMLHTTP\"); 考虑兼容性创建Ajax对象 var request; if(XMLHttpRequest){ // 新式浏览器写法 request = new XMLHttpRequest(); }else{ //IE5,IE6写法 new ActiveXObject(\"Microsoft.XMLHTTP\"); } 2.发送请求: 方法 描述 open(method,url,async) 规定请求的类型、URL 以及是否异步处理请求。method：请求的类型；GET 或 POSTurl：文件在服务器上的位置async：true（异步）或 false（同步） send(string) 将请求发送到服务器。string：仅用于 POST 请求 3.POST请求注意点: 如果想要像form表单提交数据那样使用POST请求,需要使用XMLHttpRequest对象的setRequestHeader()方法 来添加 HTTP 头。然后在 send() 方法中添加想要发送的数据： xmlhttp.open(\"POST\",\"ajax_test.php\",true); xmlhttp.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\"); xmlhttp.send(\"fname=Bill&lname=Gates\"); 4.onreadystatechange事件 当服务器给予我们反馈时,我们需要实现一些逻辑 属性 描述 onreadystatechange 存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。 readyState 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。0: 请求未初始化1: 服务器连接已建立2: 请求已接收3: 请求处理中4: 请求已完成，且响应已就绪 status 200: \"OK\"404: 未找到页面 5.服务器响应内容 如果响应的是普通字符串,使用responseText,如果响应的是XML,使用responseXML 属性 描述 responseText 获得字符串形式的响应数据。 responseXML 获得 XML 形式的响应数据。 "},"Sources/3.3_ajax传输XML.html":{"url":"Sources/3.3_ajax传输XML.html","title":"3.3 ajax传输XML","keywords":"","body":"Ajax数据传输_XML XML简介 XML 指可扩展标记语言EXtensible Markup Language,他设计的时候是用来传递数据的,虽然格式跟HTML类似. xml示例 下面是一个XML示例 周杰伦 18 途牛 xml是纯文本 XML是纯文本,这点跟HTML很像,所以我们可以用任何的文本编辑软件去打开编辑它 XML语法 虽然看起来跟HTML类似,但是XML的语法有些需要注意的,更为详细的可以查阅w3cschool_xml教程 XML声明 第一行是XML的声明,指定 XML 版本(1.0)以及使用的编码(UTF-8万国码) 自定义标签 XML中没有默认的标签,所有的标签都是我们定义者自定义的 双标签 XML中没有单标签,都是双标签 标签内 根节点 XML中必须有一个根节点,所有的子节点都放置在根节点下 XML属性 跟HTML一样,XML的标签里面也能够添加属性type = 'text',但是不建议这样用,而是使用标签的方式来表述内容(下半部分代码) Anna Smith female Anna Smith XML解析 因为XML就是标签,所以直接用解析Dom元素的方法解析即可 html代码 Document fox 18 小花花 var xmlObj = document.getElementById(\"personXML\"); var name = xmlObj.getElementsByTagName('name')[0].innerHTML; console.log(name); PHP中设置Header 在php中如果要使用xml传输数据,需要使用header()设置返回的内容为xml header('content-type:text/xml;charset=utf-8'); "},"Sources/3.4_ajax传输JSON.html":{"url":"Sources/3.4_ajax传输JSON.html","title":"3.4 ajax传输JSON","keywords":"","body":"Ajax数据传输_JSON JSON语法 JSON(JavaScript Object Notation),是ECMAScript的子集,作用是进行数据的交换,而且由于语法更为简洁,网络传输,以及机器解析都更为迅速. 语法规则: 数据在键值对中 数据由逗号分隔 花括号保存对象 方括号保存数组 数据类型: 下列内容 无论 键 值 都是用双引号包起来 数字（整数或浮点数） 字符串（在双引号中） 逻辑值（true 或 false） 数组（在方括号中） 对象（在花括号中） null 示例代码 下部分代码看起来类似于定义JavaScript对象 // 基本对象 { \"name\":\"fox\", \"age\":\"18\", \"sex\":\"true\", \"car\":null } // 数组 [ { \"name\":\"小小胡\", \"age\":\"1\" }, { \"name\":\"小二胡\", \"age\":\"2\" } ] JSON解析 接下来演示如何使用JavaScript和PHP对JSON进行解析 JavaScript 中 使用JSON对象 JSON.parse()方法:将JSON字符串转化为JavaScript对象 JSON.stringify()方法:将JavaScript对象,转化为JSON字符串 由于老式IE(8以下)浏览器中没有JSON对象,通过导入JSON2.js框架即可解决,框架获取地址为:JSON2.js_github地址 var Obj = { name:\"fox\", age:18, skill:\"撩妹\" }; console.log(Obj); // 将JavaScript对象格式化为JSON字符串 var jsonStr = JSON.stringify(Obj); console.log(jsonStr); // 将JSON字符串转化为JavaScript对象 var jsonObj = JSON.parse(jsonStr); console.log(jsonObj); 使用eval()方法 使用eval()方法需要注意的是,需要将内容使用()括号包裹起来,如示例代码 var jsonStr = { \"name\":\"fox\", \"age\":18, \"skill\":\"撩妹\" }; var jsonObj = eval('('+jsonStr+')'); console.log(jsonObj); PHP中 json_decode()方法: 将json字符串转化为变量 json_encode()方法: 将变量转化为json字符串 示例代码: \"; // php数组 $arrayName = array('name' =>'littleFox' ,'age' => 13 ); // php对象 转化为 json字符串 print_r(json_encode($arrayName)); ?> 输出结果为: stdClass Object ( [name] => itcast [age] => 54 [skill] => 歌神 ) {\"name\":\"littleFox\",\"age\":13} "},"Sources/4.1_ajax工具函数封装.html":{"url":"Sources/4.1_ajax工具函数封装.html","title":"4.1 ajax工具函数封装","keywords":"","body":"Ajax工具函数封装 原生Ajax写法回顾 原生使用Ajax主要分为五步,需要手写较多内容,如果每次我们使用Ajax都需要手写一遍,较为浪费时间,所以我们将公共代码抽取,封装为工具函数. 五步使用法: 建立XMLHTTPRequest对象 注册回调函数 当服务器回应我们了,我们想要执行什么逻辑 使用open方法设置和服务器端交互的基本信息 设置提交的网址,数据,post提交的一些额外内容 设置发送的数据，开始和服务器端交互 发送数据 更新界面 在注册的回调函数中,获取返回的数据,更新界面 示例代码:GET get的数据,直接在请求的url中添加即可 // 创建XMLHttpRequest 对象 var xml = new XMLHttpRequest(); // 设置跟服务端交互的信息 xml.open('get','01.ajax.php?name=fox'); xml.send(null); // get请求这里写null即可 // 接收服务器反馈 xhr.onreadystatechange = function () { // 这步为判断服务器是否正确响应 if (xhr.readyState == 4 && xhr.status == 200) { // 打印响应内容 alert(xml.responseText); } }; 示例代码:POST // 异步对象 var xhr = new XMLHttpRequest(); // 设置属性 xhr.open('post', '02.post.php' ); // 如果想要使用post提交数据,必须添加 xhr.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\"); // 将数据通过send方法传递 xhr.send('name=fox&age=18'); // 发送并接受返回值 xhr.onreadystatechange = function () { // 这步为判断服务器是否正确响应 if (xhr.readyState == 4 && xhr.status == 200) { alert(xhr.responseText); } }; 抽取公共部分 重复步骤分析: 创建异步对象 异步对象open,send方法调用 post方法添加HTTP协议头文件 判断Ajax响应状态 封装方法1:提取需要改变部分 哪些部分是需要使用者自定义的: 提交方法 url地址 数据 Ajax请求成功调用方法 上述内容,应该是调用时,由用户传入的 function ajax(argument) { // 创建对象 var xmlRequest ; if (XMLHttpRequest) { xmlRequest = new XMLHttpRequest(); }else{ xmlRequest = new ActiveXObject(\"Microsoft.XMLHTTP\"); } // open方法 xmlRequest.open(提交方法,url地址) // 如果是post设置HTTP协议头 if (方法==\"post\") { xmlRequest.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\"); } // send方法 xmlRequest.send(数据); // 判断状态改变,调用方法 xmlRequest.onreadystatechange = function () { // 这步为判断服务器是否正确响应 if (xhr.readyState == 4 && xhr.status == 200) { 自定义方法(数据); } }; } 封装方法2:定义方法参数 将需要用户自定义的部分,通过方法的参数传递进来 封装方法3:优化参数 参数的数量较多,如果可以之传入一个对象,将需要传入的参数,作为对象的属性,方法看起来会更为简洁 示例: 使用方法: 封装方法4:参数格式化 自定义ajax传递参数时,数据的格式为name=fox&age=18,而我们在写js代码时,创建js对象更为便捷,所以接下来添加处理数据的逻辑 思路分析:约定:传入的是js对象 将js对象格式化为:name=fox&age=18 判断提交方法,将格式化好的数据放置到对应的位置 格式化数据代码: 修改之后代码: function ajax(option) { // 创建对象 var xmlRequest ; if (XMLHttpRequest) { xmlRequest = new XMLHttpRequest(); }else{ xmlRequest = new ActiveXObject(\"Microsoft.XMLHTTP\"); } // 格式化传入的数据为name=fox&age=18这样的格式 var formatStr = \"\"; for(var item in option.data){ // 获取属性名,属性值,进行拼接 formatStr+=item;// 属性名 formatStr+=\"=\";//等号 formatStr+=option.data[item];//属性值 formatStr+=\"&\";//分隔符 } // 去除最后一个& formatStr = formatStr.slice(0,-1); // open方法 如果是get方法,那么url之后需要添加数据 if(option.method == \"get\"){ option.url = option.url+\"?\"+formatStr; option.data = null; } // 调用open方法 xmlRequest.open(option.method,option.url) // 如果是post设置HTTP协议头 if (option.method==\"post\") { xmlRequest.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\"); } // send方法 这里的data已经是修改过的,如果使用的是get方法,那么data为null xmlRequest.send(option.data); // 判断状态改变,调用方法 xmlRequest.onreadystatechange = function () { // 这步为判断服务器是否正确响应 if (xhr.readyState == 4 && xhr.status == 200) { option.success(这里的数据是ajax获取的); } }; } 封装方法5:参数格式化 为了避免自定义的Ajax方法被用户自定义的方法覆盖,添加到命名空间下,进行最后一步优化 命名空间: 为了防止自定义的Ajax函数被用户覆盖,可以通过将该函数设置为一个对象的方法 使用时,只需要通过对象.方法即可使用 "},"Sources/4.2_模板引擎.html":{"url":"Sources/4.2_模板引擎.html","title":"4.2 模板引擎","keywords":"","body":"模版插件 模版引擎简介 作用：封装了一个文件(类似js工厂方法)，通过传入一个object，来创建一个模块的HTML标签。 特性：(以我们常用的artTemplate库为例) 1.是写在 标签中的，注意：type=text/template、或者text/html，不能是text/javascript，如果是后者就直接执行了，是前两者的话，就可以当成一个平常标签来使用 2. 中的代码，HTML代码照常写，里面需要动态改变的部分，用JS代码写，写在里 本质原理： 通过模板标签的id(artTemplate要求是\\标签)，来获取标签的innerHTML，然后获取传入object的属性，通过正则表达式，对innerHTML进行查找 —> 替换修改 模版插件原理 我们定义一段文本作为模板,读取文本,使用特殊的符号,通过正则表达式找到这些特殊的符号进行替换,是不是就实现了这样的效果呢? 定义正则表达式: 想要匹配 我们可以定义正则如下(javascript中) /* JS中的RegExp对象: 创建 创建方法1: var reg = new RegExp(\"正则\") 创建方法2: var reg = /正则/; 推荐使用这种 使用: reg.exec(string) 可以检测字符串 */ /* 正则含义 ]+\\S): 匹配除了%>以外的所有字符(至少1个) \\s*:0个或多个空白字符 %>:以%>结束 */ var reg = /]+\\S)\\s*%>/; 基本使用 定义好作为模板的文本 使用正则表达式进行匹配替换即可 // 定义文本 var str = '大家好，我叫，我今年，我的爱好为:'; // 定义数据 var data = { name: 'itcast', age: 10, skill:'打篮球' }; // 快速的创建方法,好处,直接使用 \\ 即可 不需要考虑 转义 var reg = /]+\\S)\\s*%>/; // 返回的是一个对象 var match = null; // 使用 while循环 进行检查,知道没有匹配的内容 while (match = reg.exec(str)){ // 匹配到的字符串 var mathString = match[0] // 子表达式匹配到的字符串 var subString = match[1]; // 打印文本内容 console.log(\"循环中:\"+str); // 替换字符串的内容 var str = str.replace(mathString,data[subString]); match = reg.exec(str); } console.log(\"循环完毕:\"+str); 演示结果为: 常见的模板插件 BaiduTemplate(百度开发) ArtTemplate(腾讯开发) velocity.js(淘宝开发) Handlebars ArtTemplate基本使用 模板引擎的用法大同小异,ArtTemplate由于性能优秀,这里我们演示ArtTemplate的用法 导入模板引擎: 将下载好的ArtTemplate导入到页面中 定义模板: 这样的语法是定义逻辑表达式 这样的语法为输出表达式 注意:这路的模板type='text'如果写成javascript会执行 favouriteFood //此处两个转义符号使用时去掉 读取模板,传入数据: 导入了模板引擎以后,我们可以使用template(模板id,数据); // 调用模板引擎的方法 var backHtml = template(\"templ01\",data); // 返回值就是填充好的内容 个人总结: "},"Sources/5.1_jQuery中的ajax.html":{"url":"Sources/5.1_jQuery中的ajax.html","title":"5.1 jQuery中的ajax","keywords":"","body":"JQuery中的Ajax JQueryAjax使用 jquery的ajax方法 (js原生的每个模块，jQuery基本上都有封装) $.get() / $.post() ($.ajax()方法参数太复杂，简化的get/post) 参数： 在写方法参数的时候，最好按照文档中的参数顺序来传 尤其是data，如果写的位置写错，写在callback之后，会造成参数上传失败。$.get，更会直接报错，没有参数，URL拼接也成功不了 可以通过参数来设置返回值类型 {‘json’}，jq内部会帮我们转化 , 如果返回值不是json格式的，转化失败，但是也不会报错，保持原样。默认是字符串 $.ajax() 参数： type: 可以指定是GET还是POST，不写默认是GET beforeSend: 发送之前调用的匿名函数，可以return false 阻止该次请求，用来验证一些东西 success： error： $.get()方法 使用get方法向服务器获取数据 参数列表 参数 描述 url 必需。规定将请求发送的哪个 URL。 data 可选。规定连同请求发送到服务器的数据。 success(response,status,xhr) 可选。规定当请求成功时运行的函数。额外的参数：response - 包含来自请求的结果数据status - 包含请求的状态xhr - 包含 XMLHttpRequest 对象 dataType 可选。规定预计的服务器响应的数据类型。默认地，jQuery 将智能判断。可能的类型：\"xml\"\"html\"\"text\"\"script\"\"json\"\"jsonp\" 格式化表单$('form').serialize() 我们在向服务器提交数据时,如果使用的是Ajax需要手动将数据格式化name=fox&age=18类似这样的格式,JQuery已经帮助我封装好了一个格式化数据的方法 语法:$(selector).serialize() 直接可以将form中拥有name属性的表单元素的字,进行格式化 示例代码: 测试jq_serialize方法 $(function(){ $(\"#getFormInfo\").on(\"click\",function(){ var info = $(\"#testForm\").serialize() console.log(info); }) }) 演示效果 $.post()方法 通过post的方式向服务器获取数据 参数列表: 参数 描述 url 必需。规定把请求发送到哪个 URL。 data 可选。映射或字符串值。规定连同请求发送到服务器的数据。 success(data, textStatus, jqXHR) 可选。请求成功时执行的回调函数。 dataType 可选。规定预期的服务器响应的数据类型。默认执行智能判断（xml、json、script 或 html）。 示例代码: $.post(\"01.post.php\",data,function(backData){ console.log(backData); }) $.ajax({}) 方法 $.ajax()方法相比于前面的方法,拥有更为自由的定制性,可以替换$.get(),$.post()方法 参数: 在w3cSchool_$.ajax_Api中,关于参数只有下列一个.实际使用中,传递的是一个对象 而对象的属性在页面的下方,如图 参数 描述 settings 可选。用于配置 Ajax 请求的键值对集合。可以通过 $.ajaxSetup() 设置任何选项的默认值。 示例代码:这里演示的是常用的属性 $.ajax({ url:'01.php',//请求地址 data:'name=fox&age=18',//发送的数据 type:'GET',//请求的方式 success:function (argument) {},// 请求成功执行的方法 beforeSend:function (argument) {},// 在发送请求之前调用,可以做一些验证之类的处理 error:function (argument) {console.log(argument);},//请求失败调用 }) "},"Sources/5.2_瀑布流.html":{"url":"Sources/5.2_瀑布流.html","title":"5.2 瀑布流($.ajax+template)","keywords":"","body":"瀑布流 什么是瀑布流? 瀑布值得是从上往下流动的水,并且水量也较大,瀑布流指的是内容,信息,像瀑布一样从上往下进行排布 瀑布: 瀑布流: 示例取自:堆糖网 瀑布流实现原理 瀑布流的核心为: 宽度一致，高度参差不齐 新增行的内容，优先添加到最矮的下方 难点: 当我们到了新一行时,如何获取上一行高度最小的行高? 可以定义数组用来保存高度，新增了以后替换数组中原始的高度即可，如下图所示，橙色的为数组 "},"Sources/5.3_同源以及跨域.html":{"url":"Sources/5.3_同源以及跨域.html","title":"5.3 同源以及跨域","keywords":"","body":"同源以及跨域 同源能做哪些事？ 同源(同一域名下)能做哪些事？ 可以在自己的界面中，用iframe加载同源的文件 var iframe = document.querySelector('iframe'); // 获取 firame中的window var iframeWindow = iframe.contentWindow; // 获取 iframe中的 document对象 var iframeWindowDocument = iframe.contentWindow.document; // 得到iframe加载的html界面对应的document后，就可以用DOM API，来控制这个html界面了 同源的文件之间，才能发起网络请求，否则发送网络请求失败。 error： XMLHttpRequest cannot load… 跨越： 让不同源的两个文件，能做到上面第二件事 - 发送网络请求 从一个网站的页面中 去请求 另外一个不同的网站中的内容 应用： 当我们想使用类似百度开放平台上天气、交通等开放API的时候，就必须要跨域请求 同源 同源策略是浏览器的一种安全策略，所谓同源是指，域名，协议，端口完全相同。 URL 说明 是否允许通信 http://www.a.com/a.js http://www.a.com/b.js 同一域名下 允许 http://www.a.com/lab/a.js http://www.a.com/script/b.js 同一域名下不同文件夹 允许 http://www.a.com:8000/a.js http://www.a.com/b.js 同一域名，不同端口 不允许 http://www.a.com/a.js https://www.a.com/b.js 同一域名，不同协议 不允许 http://www.a.com/a.js http://70.32.92.74/b.js 域名和域名对应ip 不允许 http://www.a.com/a.js http://script.a.com/b.js 主域相同，子域不同 不允许 http://www.a.com/a.js http://a.com/b.js 同一域名，不同二级域名（同上） 不允许（cookie这种情况下也不允许访问） http://www.cnblogs.com/a.js http://www.a.com/b.js 不同域名 不允许 跨域方案 顶级域名相同的可以通过domain.name来解决，即同时设置 domain.name = 顶级域名（如example.com） document.domain + iframe window.name + iframe location.hash + iframe window.postMessage() 浏览器中跨域请求方案 JSONP JSON with Padding其本质是利用了HTML标签的src属性具有可跨域的特性。 只能以GET方式请求 注意只能够通过get方法 前端代码:注意,域名不同 核心是 通过script标签的src属性提交get请求 //callback参数：是当前页面一个方法名，起到成功回调函数的作用 //在前端，定义一个方法名为：callback对应字符串，的方法 //在服务器端，$_GET/POST['callback']取出，然后加上要返回的数据拼接成字符串返回 //前端拿到返回的数据之后：如果是'fn()'类型的字符串，会自动去寻找当前页面中有没有同名的方法，如果有，就调用，而且，如果服务器返回的有数据，并且当前页面方法有形参，那形参就代表返回的数据.直接使用 jQuery 的$.ajax() 方法当中集成了JSONP的实现，可以非常方便的实现跨域数据的访问。 dataType: 'jsonp' 设置dataType值为jsonp即开启跨域访问 jsonp 可以指定服务端接收的参数的“key”值，默认为`callback jsonpCallback可以指定相应的回调函数，如果不指定，默认会自动生成一个字符串，而且此时默认走success参数对应的成功回调。虽然是jsonpCallback，但拼接到服务器中的还是callback字段，服务器取值的时候，也是这么取 示例代码 function sendAjax(){ $.ajax({ url:'http://www.section02.com/sectcion02_jqJsonp.php', type:'post', dataType: 'jsonp', data:{name:'itt'}, success:function(data){ console.log(data); } }) } 应用: 一些平台为我们提供了可以直接使用的接口,我们只需要按照他们提供的格式提交数据即可 百度车联网api 开发者秘钥ak:0A5bc3c4fb543c8f9bc54b77bc155724 "},"Sources/6.1_Sublime常用插件.html":{"url":"Sources/6.1_Sublime常用插件.html","title":"6.1 Sublime常用插件","keywords":"","body":"常用插件 必须先安装 Package Control 插件安装的方法 ctrl+shift+p 输入 install package 回车 输入插件的名字 即可安装 AutoFileName 根据 打开的文件 进行提示 BracketHighlighter 高亮 选中的括号 CSS3 CSS3的样式 DocBlockr 函数注释插件 Emmet Emmet语法 HTML5 HTML5的一些内容 SideBarEnhancements 侧边栏增强 sublimeCodeintel 提示 html-css-js-prettify ctrl +shift +h 可以格式化代码 javascript & Nodejs Snippets 有很多的 快捷编码 比如 可以通过 ctrl+shift +p 输入snippets 查看 jquery 对于jquery的一些提示 all autocomplete 自动提示 更多插件 可以去下面的网站进行插件,建议看popular里面的插件,排名靠前的一般都不错 sublime插件网站 sublime学习网站 Sublime Text 全程指引 by Lucida "},"Sources/6.2_Sublime自定义代码段.html":{"url":"Sources/6.2_Sublime自定义代码段.html","title":"6.2 Sublime自定义代码段","keywords":"","body":"自定义代码段 为了提升开发速度,在sublime中我们能够自定义代码段,将一些常用的代码存储起来以提升开发效率 菜单项 选择菜单中的tool->Developer->NewSnippets 进行创建 设置方式 设置方法 content中写的是 写完生成的东西 注意,要写在 中 否则可能会出现解析错误的问题 ${} 进行占位 生成可供输入的内容 ${1:} 数字配合: 决定 第几次tab切换到的位置 ${1:haha} haha 是提示的信息 tabTrigger 设置的是 使用哪种什么字母 scope 设置的是具体在什么文件中呼出 如果注释掉 所有语言都可以呼出 如果仅限于 html text.html 如果css source.css hello --> source.python --> "},"Sources/6.3_Markdown部分语法.html":{"url":"Sources/6.3_Markdown部分语法.html","title":"6.3 Markdown部分语法","keywords":"","body":"markdown简明语法 语法略 工具推荐 typora 作业部落(充值vip可以享受更多功能) mweb(mac系统上推荐) 马克飞象(如果使用印象笔记使用该软件可以直接同步) gitbookEditor(可以导出目录结构) "}}